74-1 Module introduction and project setup

74-2 Setup routes, layout and footer

74-3 Create simple Top Banner react responsive carousel

74-4 Use swiper JS to create a category Swiper

https://swiperjs.com/demos#centered > npm install swiper

74-5 Shared section title for different sections

74-6 Show Popular menu items in the home page

74-7 Featured items section

css parallax

74-8 Create Parallax and Add Testimonials with react rating

https://github.com/smastrom/react-rating

75-2 Implement Cover With With Blur Parallax Using React Parallax

75-3 Create Custom Hook Usemenu To Load Menu Data

75-5 Simple Food Order page with tabs

https://github.com/reactjs/react-tabs

75-6 Display food items on different tabs

75-7 Select right tab based on the category

75-8 Load menu data from server

75-9 Module summary and home work

76-2 Setup Recaptcha And Validate Captcha

76-3 Firebase Project Setup For Bistro Boss

76-4 Setup Login Page And Auth Context

76-5 Explore React Hook Form Validation, Error Handling
https://formik.org/docs/overview

https://react-hook-form.com/get-started

76-6 Use Regex Validation In React Hook Form And Signup

pattern: /(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z])/

76-7 Logout, Sweet Alert And Some Bug Fix

76-8 Private Route And Redirect User After Login

76-9 Module Summary And Update User Profile

77-1 Module Introduction

77-2 API naming convention and API to save Cart

tanstack query: https://tanstack.com/query/latest/docs/react/overview

77-3 Save Cart data to the server

77-4 Simple Overview of React Query and load data

https://tanstack.com/query/latest/docs/react/quick-start -> Go To quick start option in tanstackquery

main.jsx > import { useQuery, useMutation, useQueryClient, QueryClient, QueryClientProvider } from '@tanstack/react-query'; >  <QueryClientProvider client={queryClient}> <Todos /> </QueryClientProvider>

77-5 (Interesting) Show add to cart count on navbar

77-6 Create Dashboard route and Dashboard navigation

77-7 Cart data from custom hook and calculate total price

javascript array reduce to get total from objects

77-8 Display cart items to review before order

77-9 Delete cart item and sync data using refetch

78-1 module Introduction and save user data

78-2 Google Sign and when to save user info

78-3 Save User if he doesnt exists in the database

78-4 Load all users on the Dashboard page

78-5 Display All users and Create Make admin API

78-6 Make User Admin and install JWT

node > require('crypto').randomBytes(64).toString('hex')

78-7 (Recap) Create a JWT token and save it on client side

78-8 (Recap) Send JWT token to back end for verification

78-9 (optional)(advanced) axios interceptor using chat gpt

78-10 Limit the feature based on admin level

78-11 (super advanced) Make user api secure and verify Admin

Ar1@@##

79-1 Why we use react-query, axios and react hook form

79-2 Make Admin only link secure using AdminRoute

79-3 Create Add item form using react hook form

https://react-hook-form.com/form-builder

import { useForm } from 'react-hook-form';

79-4 where to store images with pros and cons

79-5 Upload image to image hosting server imgbb and get image url

step1. VITE_Image_Upload_Token=f731209693862ed316cecf5
step2. const image_hosting_token=import.meta.env.VITE_Image_Upload_Token;
step3. const img_hosting_url=`"https://api.imgbb.com/1/upload?expiration=600&key=${image_hosting_token}`

79-6 Get image url and create save new item api

google search - mdn fetch post image file

79-7 Save new item to the server and make api secure

79-7 Save new item to the server and make api secure

79-8 Create Manage Items admin route and Load all menu items

79-9 Delete menu item with VerifyAdmin middleware


80-1 Module Overview and Create Payment route

80-2 Install stripe, stripe for react and create card element


const getways = ["stripe", "bkash", "paypal", "commerz", "ssl"]
getways[Math.floor(Math.random()*4)]

stripe = https://github.com/stripe/react-stripe-js > npm install @stripe/react-stripe-js @stripe/stripe-js > https://github.com/stripe/react-stripe-js/blob/master/examples/hooks/0-Card-Minimal.js

80-3 Create Stripe account and use publishable key
https://dashboard.stripe.com/test/developers

80-4 Use Test card and display card error
steps: 1. install stripe and react stripe js
2. create a check out with card element(card element contains: card number, expiration date, cvs, zip code. )
3. create account on stripe and get the publishable key pk

4. stripe test cards > https://stripe.com/docs/testing?testing-method=card-numbers#visa
 4000000000000002

80-5 Server side payment intents API to get client Secret from stripe

5. create a payment method
6. use test card to test payment ---> https://stripe.com/docs/payments/quickstart --> https://stripe.com/docs/payments/quickstart?client=react&lang=node

server side e eta install korte hobe -> npm install --save stripe

stripe > dashboard > developers > pk and secret key

copy the secret key from the bashboard and connect that with server side

https://stripe.com/docs/api/payment_intents

7. on the server side install stripe: npm install --save stripe
8. create payment intent API with payment method types: ['card]
9. make sure you provide amount in cents (multiply the price with 100)

80-6 Get Price for payment intent and understand array reduce

80-7 Use Confirm Card Payment to Process Payment

https://stripe.com/docs/payments/accept-a-payment?platform=web&ui=elements

stripe confirm card payment -> https://stripe.com/docs/js/payment_intents/confirm_card_payment

 const {paymentIntent, error} = await stripe.confirmCardPayment(
  '{PAYMENT_INTENT_CLIENT_SECRET}',
  {
    payment_method: {
      card: cardElement,
      billing_details: {
        name: 'Jenny Rosen',
      },
    },
  },
);

10. call the payment intent API to get client secret and store it in a state.
11. use confirmCardPayment api with client secret card info

80-8 Display payment error and success Message
12. display confirm card error
13. display confirm card success
14. do thing after payment

PAYMENT CHECK IN DASHBOARD - https://dashboard.stripe.com/test/payments

80-8 Display payment error and success Message

80-9 Create payment api and send payment data to the server

80-10 Save payment info to the database

81-1 Create different Dashboard Home page for User and Admin

81-2 Create Admin dashboard stats api and load data

81-3 Display stats on the admin home

81-4 (Optional) high level overview of aggregate pipeline
1. load all the payments
2. for each payments get the menuitems array
3. for each item in the menuitems array get the menuitem from the menu collection
4. put them in an array: allOrderedItems
5. separte the allOrderedItems by category using filter.
6. now get the quantity by using length: pizzas.length
7. for each category use reduce to get total amount spent on this category

81-5 Display Dashboard charts


